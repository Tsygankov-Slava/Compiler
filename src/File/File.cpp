#include "File.h"

// Эта функция в идеале должна возвращать bool.
// Где true будет обозначать, что все хорошо, а
// false соответственно, что файл не открыт.
// В таком случае в месте вызова ты мог бы проверить,
// открылся ли файл и если нет уже там
// вывести ошибку, которая у тебя выводится в
// этой функции.
// Почему это лучше?
// В текущем варианте у тебя функция занимается
// двумя вещами, она открывает и читает файл и
// выводит ошибку если файл не открыт.
// Лучше разделять ответственность, как я описал выше.
// В текущем варианте еще плохо то, что после того
// как файл не открыт программа продолжает свою работу.
void File::openAndReadFile() {
  file.open(path);
  if (file) {
    // Вероятно это не лучший способ чтения всего файла:
    // https://stackoverflow.com/questions/2602013/read-whole-ascii-file-into-c-stdstring
    while (!file.eof()) {
      string str;
      getline(file, str); //Читаем из потока file строку и записываем его в str (читается одна строка, потому что separate[3-й параметр по умолчанию '\n'])
      code += str;
    }
  } else {
    // Здесь было бы лучше, если бы ты выводил имя файла, которое передал пользователь.
    // Это сделает ошибку чуть более удобной.
    // Не просто:
    //    The file is not open.
    // А:
    //   File './examples/first.cpm' not open.
    cout << "The file is not open. Probably, your path is wrong.";
  }
}

// В С++ можно помечать методы константными.
// Благодаря этому компилятор может дать гарантии
// того, что вызвав некоторый метод, это не изменит
// внутреннее состояние объекта.
// Этот метод как раз из этой серии. Стоит его сделать
// константным.
// https://stackoverflow.com/questions/751681/meaning-of-const-last-in-a-function-declaration-of-a-class
string File::getCode() {
  return code;
}